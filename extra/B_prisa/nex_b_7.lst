
IGNITE Macro Assembler 1.8         nex_b_7.s        10/26/08 20:12  Page    1

   1 T                          .file "ex_b_7.s"
   2 T                          .include "auxil.s"      		
       STARTING INPUT FROM FILE: .\auxil.s
   1 T                          
   2 T                                  .file "auxil.s"   ; Ficheiro com defini
                                ‡Æo de pseudo-instru‡äes
   3 T                                                    ;  apenas "entendidas
                                " pelo emulador
   4 T                                                    ;
   5 T                                                    ; Estas instru‡äes nÆ
                                o existem no processador
   6 T                                                    ; real mas sƒo £teis 
                                no emulador.
   7 T                                                    ;
   8 T                                                    ; Usar apenas as docu
                                mentadas.
   9 T                                                    ;
  10 T                                                    ;
  11 T                                                    ; Para as usar num pr
                                ograma devemos ter a linha
  12 T                                                    ;      .include "auxi
                                l.s"
  13 T                                                    ; nesse programa, ant
                                es de as usar
  14 T                          
  15 T                                  .opt fill=0xea    ; dizer ao assemlbler
                                 para encher "os buracos"
  16 T                                                    ; com o opcode do nop
  17 T                          
  18                                    .macro prof
  19                                    .opcode 0xf8
  20                                    .endm
  21 T                          
  22                                    .macro setarg
  23                                    .opcode 0xf9
  24                                    .endm
  25 T                          
  26                                    .macro setrom
  27                                    .opcode 0xfa
  28                                    .endm
  29 T                          
  30                                    .macro keyq        ; ( -- flag )
  31                                    .opcode 0xfb       ;  Devolve 0 (zero) 
                                se nao houver nenhuma tecla
  32                                    .endm              ;  para ser lida ou 
                                -1 se existirem teclas para
  33 T                                                     ;  serem lidas
  34 T                                                     ;  keyq == key? == k
                                ey question
  35 T                          
  36                                    .macro key         ;   ( -- b )
  37                                    .opcode 0xfc       ;   Lˆ uma tecla da 
                                janela de terminal e deixa
  38                                    .endm              ;   na stack obyte c
                                orrespondente
  39 T                                                     ;   ao respectivo c¢
                                digo ASCII
  40 T                          
  41 T                          
  42 T                          

IGNITE Macro Assembler 1.8         nex_b_7.s        10/26/08 20:12  Page    2

       SECTION: .text 
  43                                    .macro emit        ;  ( b -- )
  44                                    .opcode 0xfd       ;  Imprime na janela
                                 de terminal o caracter cujo c¢digo
  45                                    .endm              ;  ASCII se encontra
                                 no topo da stack
  46 T                          
  47 T                          
  48                                    .macro halt        ;  P ra o Emulador
  49                                    .opcode 0xfe       ;
  50                                    .endm              ;
  51 T                          
       ENDING   INPUT FROM FILE: .\auxil.s
       RESUMING INPUT FROM FILE: nex_b_7.s
   3 T                          .include "biblioteca.s"			
       STARTING INPUT FROM FILE: .\biblioteca.s
   1 T                          .file "biblioteca1.s"
   2 T                          
   3 T                          ;mydivu( n1_low n1_high n2 -- quociente resto )
   4 T                          ;desc:	n1_high n1_low/n2=quociente resto
   5 T                          ;input: 
   6 T                          ;	n1_low: dividendo(parte baixa do numero
                                 de 64 bits)
   7 T                          ;	n1_high:dividendo(parte baixa do numero
                                 de 64 bits)
   8 T                          ;	n2: divisor
   9 T                          ;		
  10 T                          ;output:
  11 T                          ;	quociente: quociente 
  12 T                          ;	resto: resto
  13 T                          ;
  14 T                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;;;;;;;;;;		      
  15 T 00000000                 mydivu:: 
  16 T 00000000  70             	push 	g0    		
  17 T 00000001     ba                  pop 	lstack
  18 T 00000002        50               pop  	g0      		
                                	; colocar o divisor em g0
  19 T 00000003           de            divu
  20 T 00000004  9a                     push 	lstack
  21 T 00000005     50                  pop 	g0      		
                                	; recuperar o registo g0
  22 T 00000006        6e               ret
  23 T                          	
  24 T                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;;;;;;;;;;		
  25 T                          ;mymulu ( n1 n2 -- n3_low n3_high )
  26 T                          ;desc:	n1*n2=(n3_highn3_low)(64 bits)
  27 T                          ;input:
  28 T                          ;	n1: multiplicando
  29 T                          ;	n2: multiplicador
  30 T                          ;		
  31 T                          ;output:
  32 T                          ;	n3_low: resultado(parte baixa do numero
                                 de 64 bits)
  33 T                          ;	n3_high: resultado(parte baixa do numer
                                o de 64 bits)
  34 T                          ;

IGNITE Macro Assembler 1.8         nex_b_7.s        10/26/08 20:12  Page    3

       SECTION: .text 
  35 T                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;;;;;;;;;;		      
     T 00000007           30 
  36 T 00000008                 mymulu::
  37 T 00000008  70             	push 	g0      
  38 T 00000009     ba                  pop 	lstack
  39 T 0000000a        50               pop  	g0      ; colocar n2 em g0
  40 T 0000000b           20            push.n 	#0
  41 T 0000000c  d7                     mulu
  42 T 0000000d     9a                  push 	lstack
  43 T 0000000e        50               pop 	g0      ; recuperar o registo g
                                0
  44 T 0000000f           6e    	ret
  45 T                          
  46 T                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;;;;;;;;;;
  47 T 00000010                 mymuls::
  48 T 00000010  70             	push 	g0      
  49 T 00000011     ba                  pop 	lstack
  50 T 00000012        50               pop  	g0      ; colocar n2 em g0
  51 T 00000013           20            push.n 	#0
  52 T 00000014  d5                     muls
  53 T 00000015     9a                  push 	lstack
  54 T 00000016        50               pop 	g0      ; recuperar o registo g
                                0
  55 T 00000017           6e    	ret
  56 T                          
  57 T                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;;;;;;;;;;		
  58 T                          ;escrb (byte addr -- )
  59 T                          ;desc:	escreve um byte na memória 
  60 T                          ;input:
  61 T                          ;	byte: o byte a guardar
  62 T                          ;	addr: o endereço a guardar o byte
  63 T                          ;output:
  64 T                          ;
  65 T                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;;;;;;;;;;			
  66 T 00000018                 escrb::	
  67 T 00000018  98             	push	x
  68 T 00000019     ba          	pop		lstack
  69 T 0000001a        b8       	pop		x
  70 T 0000001b           41    	ld 		[x]
  71 T 0000001c  da             	replb
  72 T 0000001d     61          	st 		[x]
  73 T 0000001e        9a       	push	lstack
  74 T 0000001f           b8    	pop		x
  75 T 00000020  6e             	ret	
  76 T                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;;;;;;;;;;	
  77 T                          ;escrw (word addr -- )
  78 T                          ;desc:	escreve um word na memória 
  79 T                          ;input:
  80 T                          ;	word: a word a guardar
  81 T                          ;	addr: o endereço a guardar a word
     T 00000021     30 30 30 
  82 T 00000024                 escrw::	
  83 T 00000024  98             	push x
  84 T 00000025     ba          	pop lstack
  85 T 00000026        b8       	pop x

IGNITE Macro Assembler 1.8         nex_b_7.s        10/26/08 20:12  Page    4

       SECTION: .text 
  86 T 00000027           41    	ld [x]
  87 T 00000028  eb             	replw
  88 T 00000029     61          	st [x]
  89 T 0000002a        9a       	push lstack
  90 T 0000002b           b8    	pop x
  91 T 0000002c  6e             	ret
  92 T                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;;;;;;;;;;		
  93 T                          ;estadentro (lim_inf lim_sup valor -- 0|f)
  94 T                          ;desc:	verificar se  um valor pertence a um in
                                tevalo
  95 T                          ;input:
  96 T                          ;	lim_inf: o limite inferior
  97 T                          ;	lim_sup: o limite superior
  98 T                          ;	valor: o valor a verificar
  99 T                          ;output:
 100 T                          ;	0|f: 
 101 T                          ;			f: se o valor esta dent
                                ro dos limites(inclusivé)
 102 T                          ;			0: em caso contrario
 103 T                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;;;;;;;;;;
     T 0000002d     30 30 30 
 104 T 00000030                 estadentro::	
 105 T 00000030  ba             	pop	lstack			;valor-
                                >r2
 106 T 00000031     ba          	pop	lstack			;lim_su
                                p->r1
 107 T 00000032        ba       	pop	lstack			;lim_in
                                f->r0
 108 T                          
 109 T 00000033           82    	push	r2
 110 T 00000034  80             	push	r0
 111 T 00000035     df          	mxm		
 112 T 00000036        b2       	xcg
 113 T 00000037           b3    	pop
 114 T 00000038  82             	push	r2
 115 T 00000039     c8          	sub
 116 T                          
 117 T 0000003a        82       	push	r2
 118 T 0000003b           81    	push	r1
 119 T 0000003c  df             	mxm		
 120 T 0000003d     b3          	pop
 121 T 0000003e        82       	push	r2
 122 T 0000003f           c8    	sub
 123 T                          
 124 T 00000040  e0             	or
 125 T 00000041     e5          	eqz
 126 T 00000042        9a       	push	lstack		
 127 T 00000043           b3    	pop	
 128 T 00000044  9a             	push	lstack			
 129 T 00000045     b3          	pop
 130 T 00000046        9a       	push	lstack			
 131 T 00000047           b3    	pop
 132 T                          
 133 T 00000048  6e             	ret	
 134 T                          	
 135 T                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;;;;;;;;;;		
 136 T                          ;emaior (valor1 valor2 -- maior 0|f)

IGNITE Macro Assembler 1.8         nex_b_7.s        10/26/08 20:12  Page    5

       SECTION: .text 
 137 T                          ;desc:	verifica se valor2 é maior que valor1
 138 T                          ;input:
 139 T                          ;	valor1: o valor a verificar
 140 T                          ;	valor2: o valor a verificar
 141 T                          ;
 142 T                          ;output:
 143 T                          ;	maior:	o valor maior
 144 T                          ;	0|f: 
 145 T                          ;			f: se o valor2 é maior
 146 T                          ;			0: em caso contrario
 147 T                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;;;;;;;;;;		      
     T 00000049     30 30 30 
 148 T 0000004c                 emaior::
 149 T 0000004c  b2             		xcg
 150 T 0000004d     92          		push
 151 T 0000004e        ba       		pop		lstack
 152 T 0000004f           df    		mxm
 153 T 00000050  b2             		xcg		
 154 T 00000051     9a          		push	lstack
 155 T 00000052        c8       		sub
 156 T 00000053           e5    		eqz
 157 T 00000054  6e             		ret    		
       ENDING   INPUT FROM FILE: .\biblioteca.s
       RESUMING INPUT FROM FILE: nex_b_7.s
   4 A                          .org 0x1000        			
                                	
       SECTION: ORG SECTION (ORG 00001000)
   5 A 00001000  00 00 00 0a            br inicio
   6 A                          
   7 A                          
   8 A 00001004  00 00 00 01    l1:	.long 1
   9 A 00001008  00 00 00 03    l2:	.long 3
  10 A 0000100c  00 00 00 02    l3:	.long 2
  11 A 00001010  00 00 00 00    l4:	.long 0
  12 A                          
  13 A                          
  14 A 00001014                 F5::					
  15 A 00001014  50             		pop g0
  16 A 00001015     51          		pop g1
  17 A 00001016        52       		pop g2
  18 A                          		
  19 A 00001017           70    		push g0
  20 A 00001018  71             		push g1
  21 A 00001019     c0          		add
  22 A                          		
  23 A 0000101a        70       		push g0
  24 A 0000101b           72    		push g2
  25 A 0000101c  c0             		add
  26 A                          		
  27 A 0000101d     c8          		sub
  28 A 0000101e        4f       		push.l #l4
  29 A 0000101f           60    		st[]
     A 00001020  00 00 10 10 
  30 A                          		
  31 A                          		
  32 A 00001024  6e             		ret
  33 A                          

IGNITE Macro Assembler 1.8         nex_b_7.s        10/26/08 20:12  Page    6

       SECTION: ORG SECTION (ORG 00001000)
  34 A                          	
  35 A                          
  36 A                          
     A 00001025     30 30 30 
  37 A 00001028                 inicio::
  38 A 00001028  4f             		push.l #l1
  39 A 00001029     40          		ld[]
  40 A 0000102a        4f       		push.l #l2
  41 A 0000102b           40    		ld[]
     A 0000102c  00 00 10 04 
     A 00001030  00 00 10 08 
  42 A 00001034  4f             		push.l #l3
  43 A 00001035     40          		ld[]
  44 A                          
  45 A 00001036        0f f8    		call F5
     A 00001038  00 00 10 0c 
  46 A                          
  47 A                                  	halt
  48 A 0000103d                        		.end

Total Errors:      0
Total Warnings:    0


SYMBOL TABLE

Value     Section/Type  Name

0000004c  .text         emaior
00000018  .text         escrb
00000024  .text         escrw
00000030  .text         estadentro
00000000  .text         mydivu
00000010  .text         mymuls
00000008  .text         mymulu

00001014  ABSOLUTE      F5
00003e80  ABSOLUTE      __CLOCK_KHZ__
00000001  ABSOLUTE      __IGNITE_2F__
00000065  ABSOLUTE      __PATRIOTC__
00000064  ABSOLUTE      __SEP__
00001028  ABSOLUTE      inicio
00001004  ABSOLUTE      l1
00001008  ABSOLUTE      l2
0000100c  ABSOLUTE      l3
00001010  ABSOLUTE      l4
