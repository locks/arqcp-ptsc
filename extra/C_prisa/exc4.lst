
IGNITE Macro Assembler 1.8           exc4.s         10/26/08 21:14  Page    1

   1 T                          ; Enunciado:
   2 T                          ;
   3 T                          ; C4:	Tendo dois números de 32 bits que repre
                                sentam um deles o endereço IP de uma máquina e 
                                o outro a máscara dessa rede,
   4 T                          ;	faça uma rotina que lhe permita detecta
                                r o endereço da rede em causa e o seu espaço de
                                 endereçamento de hosts.
   5 T                          ;	RedeHost(máscara endereço -- end_rede e
                                nd_host) 
   6 T                          ;
   7 T                          
   8 T                          .file "exc4.s"
   9 T                          
  10 T                          .include "auxil.s"      		; defin
                                ições auxiliares
       STARTING INPUT FROM FILE: .\auxil.s
   1 T                          
   2 T                                  .file "auxil.s"   ; Ficheiro com defini
                                ‡Æo de pseudo-instru‡äes
   3 T                                                    ;  apenas "entendidas
                                " pelo emulador
   4 T                                                    ;
   5 T                                                    ; Estas instru‡äes nÆ
                                o existem no processador
   6 T                                                    ; real mas sƒo £teis 
                                no emulador.
   7 T                                                    ;
   8 T                                                    ; Usar apenas as docu
                                mentadas.
   9 T                                                    ;
  10 T                                                    ;
  11 T                                                    ; Para as usar num pr
                                ograma devemos ter a linha
  12 T                                                    ;      .include "auxi
                                l.s"
  13 T                                                    ; nesse programa, ant
                                es de as usar
  14 T                          
  15 T                                  .opt fill=0xea    ; dizer ao assemlbler
                                 para encher "os buracos"
  16 T                                                    ; com o opcode do nop
  17 T                          
  18                                    .macro prof
  19                                    .opcode 0xf8
  20                                    .endm
  21 T                          
  22                                    .macro setarg
  23                                    .opcode 0xf9
  24                                    .endm
  25 T                          
  26                                    .macro setrom
  27                                    .opcode 0xfa
  28                                    .endm
  29 T                          
  30                                    .macro keyq        ; ( -- flag )
  31                                    .opcode 0xfb       ;  Devolve 0 (zero) 
                                se nao houver nenhuma tecla
  32                                    .endm              ;  para ser lida ou 
                                -1 se existirem teclas para

IGNITE Macro Assembler 1.8           exc4.s         10/26/08 21:14  Page    2

       SECTION: .text 
  33 T                                                     ;  serem lidas
  34 T                                                     ;  keyq == key? == k
                                ey question
  35 T                          
  36                                    .macro key         ;   ( -- b )
  37                                    .opcode 0xfc       ;   Lˆ uma tecla da 
                                janela de terminal e deixa
  38                                    .endm              ;   na stack obyte c
                                orrespondente
  39 T                                                     ;   ao respectivo c¢
                                digo ASCII
  40 T                          
  41 T                          
  42 T                          
  43                                    .macro emit        ;  ( b -- )
  44                                    .opcode 0xfd       ;  Imprime na janela
                                 de terminal o caracter cujo c¢digo
  45                                    .endm              ;  ASCII se encontra
                                 no topo da stack
  46 T                          
  47 T                          
  48                                    .macro halt        ;  P ra o Emulador
  49                                    .opcode 0xfe       ;
  50                                    .endm              ;
  51 T                          
       ENDING   INPUT FROM FILE: .\auxil.s
       RESUMING INPUT FROM FILE: exc4.s
  11 T                          
  12 A                          .org 0x200        			; progr
                                ama inicia-se no byte 512 = 0x200
       SECTION: ORG SECTION (ORG 00000200)
  13 A                          
  14 A 00000200  00 00 00 1a            br inicio
  15 A                          
  16 A                          .include "biblioteca.s"			; bibli
                                oteca de funções
       STARTING INPUT FROM FILE: .\biblioteca.s
   1 A                          .file "biblioteca1.s"
   2 A                          
   3 A                          ;mydivu( n1_low n1_high n2 -- quociente resto )
   4 A                          ;desc:	n1_high n1_low/n2=quociente resto
   5 A                          ;input: 
   6 A                          ;	n1_low: dividendo(parte baixa do numero
                                 de 64 bits)
   7 A                          ;	n1_high:dividendo(parte baixa do numero
                                 de 64 bits)
   8 A                          ;	n2: divisor
   9 A                          ;		
  10 A                          ;output:
  11 A                          ;	quociente: quociente 
  12 A                          ;	resto: resto
  13 A                          ;
  14 A                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;;;;;;;;;;		      
  15 A 00000204                 mydivu:: 
  16 A 00000204  70             	push 	g0    		
  17 A 00000205     ba                  pop 	lstack

IGNITE Macro Assembler 1.8           exc4.s         10/26/08 21:14  Page    3

       SECTION: ORG SECTION (ORG 00000200)
  18 A 00000206        50               pop  	g0      		
                                	; colocar o divisor em g0
  19 A 00000207           de            divu
  20 A 00000208  9a                     push 	lstack
  21 A 00000209     50                  pop 	g0      		
                                	; recuperar o registo g0
  22 A 0000020a        6e               ret
  23 A                          	
  24 A                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;;;;;;;;;;		
  25 A                          ;mymulu ( n1 n2 -- n3_low n3_high )
  26 A                          ;desc:	n1*n2=(n3_highn3_low)(64 bits)
  27 A                          ;input:
  28 A                          ;	n1: multiplicando
  29 A                          ;	n2: multiplicador
  30 A                          ;		
  31 A                          ;output:
  32 A                          ;	n3_low: resultado(parte baixa do numero
                                 de 64 bits)
  33 A                          ;	n3_high: resultado(parte baixa do numer
                                o de 64 bits)
  34 A                          ;
  35 A                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;;;;;;;;;;		      
     A 0000020b           30 
  36 A 0000020c                 mymulu::
  37 A 0000020c  70             	push 	g0      
  38 A 0000020d     ba                  pop 	lstack
  39 A 0000020e        50               pop  	g0      ; colocar n2 em g0
  40 A 0000020f           20            push.n 	#0
  41 A 00000210  d7                     mulu
  42 A 00000211     9a                  push 	lstack
  43 A 00000212        50               pop 	g0      ; recuperar o registo g
                                0
  44 A 00000213           6e    	ret
  45 A                          
  46 A                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;;;;;;;;;;
  47 A 00000214                 mymuls::
  48 A 00000214  70             	push 	g0      
  49 A 00000215     ba                  pop 	lstack
  50 A 00000216        50               pop  	g0      ; colocar n2 em g0
  51 A 00000217           20            push.n 	#0
  52 A 00000218  d5                     muls
  53 A 00000219     9a                  push 	lstack
  54 A 0000021a        50               pop 	g0      ; recuperar o registo g
                                0
  55 A 0000021b           6e    	ret
  56 A                          
  57 A                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;;;;;;;;;;		
  58 A                          ;escrb (byte addr -- )
  59 A                          ;desc:	escreve um byte na memória 
  60 A                          ;input:
  61 A                          ;	byte: o byte a guardar
  62 A                          ;	addr: o endereço a guardar o byte
  63 A                          ;output:
  64 A                          ;
  65 A                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;;;;;;;;;;			

IGNITE Macro Assembler 1.8           exc4.s         10/26/08 21:14  Page    4

       SECTION: ORG SECTION (ORG 00000200)
  66 A 0000021c                 escrb::	
  67 A 0000021c  98             	push	x
  68 A 0000021d     ba          	pop		lstack
  69 A 0000021e        b8       	pop		x
  70 A 0000021f           41    	ld 		[x]
  71 A 00000220  da             	replb
  72 A 00000221     61          	st 		[x]
  73 A 00000222        9a       	push	lstack
  74 A 00000223           b8    	pop		x
  75 A 00000224  6e             	ret	
  76 A                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;;;;;;;;;;	
  77 A                          ;escrw (word addr -- )
  78 A                          ;desc:	escreve um word na memória 
  79 A                          ;input:
  80 A                          ;	word: a word a guardar
  81 A                          ;	addr: o endereço a guardar a word
     A 00000225     30 30 30 
  82 A 00000228                 escrw::	
  83 A 00000228  98             	push x
  84 A 00000229     ba          	pop lstack
  85 A 0000022a        b8       	pop x
  86 A 0000022b           41    	ld [x]
  87 A 0000022c  eb             	replw
  88 A 0000022d     61          	st [x]
  89 A 0000022e        9a       	push lstack
  90 A 0000022f           b8    	pop x
  91 A 00000230  6e             	ret
  92 A                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;;;;;;;;;;		
  93 A                          ;estadentro (lim_inf lim_sup valor -- 0|f)
  94 A                          ;desc:	verificar se  um valor pertence a um in
                                tevalo
  95 A                          ;input:
  96 A                          ;	lim_inf: o limite inferior
  97 A                          ;	lim_sup: o limite superior
  98 A                          ;	valor: o valor a verificar
  99 A                          ;output:
 100 A                          ;	0|f: 
 101 A                          ;			f: se o valor esta dent
                                ro dos limites(inclusivé)
 102 A                          ;			0: em caso contrario
 103 A                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;;;;;;;;;;
     A 00000231     30 30 30 
 104 A 00000234                 estadentro::	
 105 A 00000234  ba             	pop	lstack			;valor-
                                >r2
 106 A 00000235     ba          	pop	lstack			;lim_su
                                p->r1
 107 A 00000236        ba       	pop	lstack			;lim_in
                                f->r0
 108 A                          
 109 A 00000237           82    	push	r2
 110 A 00000238  80             	push	r0
 111 A 00000239     df          	mxm		
 112 A 0000023a        b2       	xcg
 113 A 0000023b           b3    	pop
 114 A 0000023c  82             	push	r2
 115 A 0000023d     c8          	sub

IGNITE Macro Assembler 1.8           exc4.s         10/26/08 21:14  Page    5

       SECTION: ORG SECTION (ORG 00000200)
 116 A                          
 117 A 0000023e        82       	push	r2
 118 A 0000023f           81    	push	r1
 119 A 00000240  df             	mxm		
 120 A 00000241     b3          	pop
 121 A 00000242        82       	push	r2
 122 A 00000243           c8    	sub
 123 A                          
 124 A 00000244  e0             	or
 125 A 00000245     e5          	eqz
 126 A 00000246        9a       	push	lstack		
 127 A 00000247           b3    	pop	
 128 A 00000248  9a             	push	lstack			
 129 A 00000249     b3          	pop
 130 A 0000024a        9a       	push	lstack			
 131 A 0000024b           b3    	pop
 132 A                          
 133 A 0000024c  6e             	ret	
 134 A                          	
 135 A                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;;;;;;;;;;		
 136 A                          ;emaior (valor1 valor2 -- maior 0|f)
 137 A                          ;desc:	verifica se valor2 é maior que valor1
 138 A                          ;input:
 139 A                          ;	valor1: o valor a verificar
 140 A                          ;	valor2: o valor a verificar
 141 A                          ;
 142 A                          ;output:
 143 A                          ;	maior:	o valor maior
 144 A                          ;	0|f: 
 145 A                          ;			f: se o valor2 é maior
 146 A                          ;			0: em caso contrario
 147 A                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;;;;;;;;;;		      
     A 0000024d     30 30 30 
 148 A 00000250                 emaior::
 149 A 00000250  b2             		xcg
 150 A 00000251     92          		push
 151 A 00000252        ba       		pop		lstack
 152 A 00000253           df    		mxm
 153 A 00000254  b2             		xcg		
 154 A 00000255     9a          		push	lstack
 155 A 00000256        c8       		sub
 156 A 00000257           e5    		eqz
 157 A 00000258  6e             		ret    		
       ENDING   INPUT FROM FILE: .\biblioteca.s
       RESUMING INPUT FROM FILE: exc4.s
  17 A                          
     A 00000259     30 30 30 
  18 A 0000025c                 RedeHost::
  19 A 0000025c  92             push 
  20 A 0000025d     50          pop g0
  21 A 0000025e        e1       and
  22 A 0000025f           70    push g0
  23 A 00000260  4f             push.l #0x0000ffff
  24 A 00000261     e1          and
  25 A 00000262        6e       		ret
  26 A                          

IGNITE Macro Assembler 1.8           exc4.s         10/26/08 21:14  Page    6

       SECTION: ORG SECTION (ORG 00000200)
  27 A                          	
     A 00000263           30 
     A 00000264  00 00 ff ff 
  28 A 00000268                 inicio::
  29 A                          ;10.0.0.2
  30 A                          ;255.0.0.0
  31 A                          
  32 A 00000268  4f             push.l #0xff000000
  33 A 00000269     4f          push.l #0x0a000002
  34 A                          
  35 A                          		
  36 A                          
  37 A 0000026a        0f fd    		call RedeHost
     A 0000026c  ff 00 00 00 
     A 00000270  0a 00 00 02 
  38 A                          
  39 A                                  	halt
  40 A 00000275                        		.end

Total Errors:      0
Total Warnings:    0


SYMBOL TABLE

Value     Section/Type  Name

0000025c  ABSOLUTE      RedeHost
00003e80  ABSOLUTE      __CLOCK_KHZ__
00000001  ABSOLUTE      __IGNITE_2F__
00000065  ABSOLUTE      __PATRIOTC__
00000064  ABSOLUTE      __SEP__
00000250  ABSOLUTE      emaior
0000021c  ABSOLUTE      escrb
00000228  ABSOLUTE      escrw
00000234  ABSOLUTE      estadentro
00000268  ABSOLUTE      inicio
00000204  ABSOLUTE      mydivu
00000214  ABSOLUTE      mymuls
0000020c  ABSOLUTE      mymulu
